devtools::install("C:/Users/moroncog/Documents/GitHub/wham", quick = TRUE)
devtools::install("C:/Users/moroncog/Documents/GitHub/wham", quick = TRUE)
devtools::install("C:/Users/moroncog/Documents/GitHub/wham", quick = TRUE)
devtools::install("C:/Users/moroncog/Documents/GitHub/wham", quick = TRUE)
devtools::install("C:/Users/moroncog/Documents/GitHub/wham", quick = TRUE)
# Install the base version of WHAM for this script:
# devtools::install_github('gmoroncorrea/wham', ref='growth', build_vignettes = FALSE) # check this
rm(list = ls())
library(r4ss)
library(wham)
library(ggplot2)
library(fields)
mainDir = 'C:/Users/moroncog/Documents/Postdoc_UW/test_size-info' # change this
setwd(mainDir)
# Read simulated data:
data_file = r4ss::SS_readdat_3.30(file = 'SS_sim/D3-E0-F0-R0-cod/10/em/ss3.dat') # from EM
SS_report = r4ss::SS_output(dir = 'SS_sim/D3-E0-F0-R0-cod/10/om', covar = FALSE) # from OM
# Define some important information:
min_year = SS_report$startyr
max_year = SS_report$endyr
n_ages = length(SS_report$agebins)
fish_len = SS_report$lbins
n_years = length(min_year:max_year)
# NAA info:
NAA_SS = SS_report$natage[SS_report$natage$`Beg/Mid` == 'B' & SS_report$natage$Yr >= min_year & SS_report$natage$Yr <= max_year, 13:ncol(SS_report$natage)]
# WHAM MODEL --------------------------------------------------------------
wham_data = list()
wham_data$ages = 1:n_ages
wham_data$lengths = fish_len
wham_data$CV_len = c(0.1, 0.1)
wham_data$years = min_year:max_year
wham_data$n_fleets = 1L
wham_data$agg_catch = as.matrix(data_file$catch[2:(n_years+1), 4])
wham_data$catch_cv = as.matrix(data_file$catch[2:(n_years+1), 5])
catch_pal_num = data_file$lencomp[data_file$lencomp$FltSvy == 1, 7:(7+length(wham_data$lengths)-1)]
catch_pal_prop = t(apply(as.matrix(catch_pal_num),1, function(x) x/sum(x)))
wham_data$catch_pal = catch_pal_prop
wham_data$catch_NeffL = as.matrix(as.double(data_file$lencomp[data_file$lencomp$FltSvy == 1, 6]))
wham_data$use_catch_pal = matrix(1, nrow = length(wham_data$years), ncol = wham_data$n_fleets)
wham_data$selblock_pointer_fleets = matrix(1L, ncol = 1, nrow = (max_year - min_year + 1))
wham_data$F = matrix(apply(X = SS_report$fatage[SS_report$fatage$Yr >= min_year &
SS_report$fatage$Yr <= max_year,
8:ncol(SS_report$fatage)], MARGIN = 1, FUN = max),
ncol = 1)
wham_data$n_indices = 1L
wham_data$agg_indices = as.matrix(data_file$CPUE[,4])
index_paa_num = data_file$agecomp[data_file$agecomp$FltSvy == 2, 10:(10+n_ages-1)]
index_paa_prop = t(apply(as.matrix(index_paa_num),1, function(x) x/sum(x)))
wham_data$index_paa = array(data = index_paa_prop, dim = c(1,max_year-min_year+1,n_ages))
wham_data$index_cv = as.matrix(data_file$CPUE[,5])
wham_data$index_Neff =  as.matrix(as.double(data_file$agecomp[data_file$agecomp$FltSvy == 2, 9]))
wham_data$units_indices = rep(0L, times = 1) # numbers
wham_data$units_index_paa = rep(2L, times = 1) # numbers
wham_data$use_index_paa = matrix(1, ncol = 1, nrow = (max_year - min_year + 1))
wham_data$selblock_pointer_indices = matrix(2L, ncol = 1, nrow = (max_year - min_year + 1))
wham_data$fracyr_indices = matrix(0.5, ncol = 1, nrow = (max_year - min_year + 1))
waa_matrix = as.matrix(SS_report$wtatage[SS_report$wtatage$Fleet == 1 & SS_report$wtatage$Yr <= max_year, 7:(7+n_ages-1)])
waa_matrix_ini = as.matrix(SS_report$wtatage[SS_report$wtatage$Fleet == 0 & SS_report$wtatage$Yr <= max_year, 7:(7+n_ages-1)])
waa_tot_matrix = rbind(waa_matrix, waa_matrix, waa_matrix, waa_matrix_ini)
dim(waa_tot_matrix) = c(max_year-min_year+1,4,n_ages)
waa_tot_matrix2 = aperm(waa_tot_matrix, c(2,1,3))
wham_data$waa = waa_tot_matrix2
wham_data$maturity = matrix(rep(SS_report$endgrowth[,19], times = max_year - min_year + 1),
ncol = n_ages, nrow = max_year - min_year + 1, byrow = TRUE)
wham_data$fracyr_SSB = rep(0, times = max_year - min_year + 1)
wham_data$Fbar_ages = c(5L,21L)
wham_data$percentSPR = 20
wham_data$percentFXSPR = n_years
wham_data$percentFMSY = n_years
wham_data$XSPR_R_avg_yrs = 1:n_years
wham_data$XSPR_R_opt = 1
wham_data$simulate_process_error = rep(1, times = 6)
wham_data$simulate_observation_error = rep(1, times = 3)
wham_data$simulate_period = rep(1, times = 2)
wham_data$bias_correct_process = 0
wham_data$bias_correct_observation = 0
my_input = prepare_wham_input(model_name="whamLenSelex",
selectivity=list(model=rep("len-double-logistic",2),
re=rep("none",2),
n_selblocks = 2),
M = list(model = 'constant', re = 'none',
initial_means = 0.36),
NAA_re = list(sigma="rec", cor = 'iid', N1_model = 0,
recruit_model = 2,
N1_pars = as.vector(as.matrix(NAA_SS[1,])),
recruit_pars = c(500000)),
growth = list(model = 'vB_classic',
re = c('none', 'none', 'none'),
init_vals = c(0.16, 117.9, 0.835)), # K, Linf, t0
catchability = list(re = 'none', initial_q = 1, q_lower = 0,
q_upper = 1000, prior_sd = NA),
age_comp = 'multinomial',
len_comp = 'multinomial',
basic_info = wham_data)
my_input$par$growth_re
my_input$par$growth_a
my_input$map$growth_a
my_input$map$growth_re
my_input = prepare_wham_input(model_name="whamLenSelex",
selectivity=list(model=rep("len-double-logistic",2),
re=rep("none",2),
n_selblocks = 2),
M = list(model = 'constant', re = 'none',
initial_means = 0.36),
NAA_re = list(sigma="rec", cor = 'iid', N1_model = 0,
recruit_model = 2,
N1_pars = as.vector(as.matrix(NAA_SS[1,])),
recruit_pars = c(500000)),
growth = list(model = 'vB_classic',
re = c('ar1_y', 'none', 'none'),
init_vals = c(0.16, 117.9, 0.835),
est_pars = c(1)), # K, Linf, t0
catchability = list(re = 'none', initial_q = 1, q_lower = 0,
q_upper = 1000, prior_sd = NA),
age_comp = 'multinomial',
len_comp = 'multinomial',
basic_info = wham_data)
my_input$data$selpars_lower
my_input$data$selpars_upper
my_input$data$selpars_est
my_input$data$selblock_models
my_input$par$logit_selpars
my_input$map$logit_selpars
my_input$par$growth_a
my_input$par$growth_re
my_input$map$growth_a
my_input$map$growth_re
my_input = prepare_wham_input(model_name="whamLenSelex",
selectivity=list(model=rep("len-double-logistic",2),
re=rep("none",2),
n_selblocks = 2),
M = list(model = 'constant', re = 'ar1_a',
initial_means = 0.36),
NAA_re = list(sigma="rec", cor = 'iid', N1_model = 0,
recruit_model = 2,
N1_pars = as.vector(as.matrix(NAA_SS[1,])),
recruit_pars = c(500000)),
growth = list(model = 'vB_classic',
re = c('ar1_y', 'none', 'none'),
init_vals = c(0.16, 117.9, 0.835),
est_pars = c(1)), # K, Linf, t0
catchability = list(re = 'none', initial_q = 1, q_lower = 0,
q_upper = 1000, prior_sd = NA),
age_comp = 'multinomial',
len_comp = 'multinomial',
basic_info = wham_data)
my_input$data$selpars_lower
my_input$data$selpars_upper
my_input$data$selpars_est
my_input$data$selblock_models
my_input$par$logit_selpars
my_input$map$logit_selpars
my_input$par$M_re
my_input$map$M_re
my_input = prepare_wham_input(model_name="whamLenSelex",
selectivity=list(model=rep("len-double-logistic",2),
re=rep("none",2),
n_selblocks = 2),
M = list(model = 'constant', re = '2dar1',
initial_means = 0.36),
NAA_re = list(sigma="rec", cor = 'iid', N1_model = 0,
recruit_model = 2,
N1_pars = as.vector(as.matrix(NAA_SS[1,])),
recruit_pars = c(500000)),
growth = list(model = 'vB_classic',
re = c('ar1_y', 'none', 'none'),
init_vals = c(0.16, 117.9, 0.835),
est_pars = c(1)), # K, Linf, t0
catchability = list(re = 'none', initial_q = 1, q_lower = 0,
q_upper = 1000, prior_sd = NA),
age_comp = 'multinomial',
len_comp = 'multinomial',
basic_info = wham_data)
my_input$data$selpars_lower
my_input$data$selpars_upper
my_input$data$selpars_est
my_input$data$selblock_models
my_input$par$logit_selpars
my_input$map$logit_selpars
my_input$map$M_re
my_input = prepare_wham_input(model_name="whamLenSelex",
selectivity=list(model=rep("len-double-logistic",2),
re=rep("none",2),
n_selblocks = 2),
M = list(model = 'constant', re = 'ar1_y',
initial_means = 0.36),
NAA_re = list(sigma="rec", cor = 'iid', N1_model = 0,
recruit_model = 2,
N1_pars = as.vector(as.matrix(NAA_SS[1,])),
recruit_pars = c(500000)),
growth = list(model = 'vB_classic',
re = c('ar1_y', 'none', 'none'),
init_vals = c(0.16, 117.9, 0.835),
est_pars = c(1)), # K, Linf, t0
catchability = list(re = 'none', initial_q = 1, q_lower = 0,
q_upper = 1000, prior_sd = NA),
age_comp = 'multinomial',
len_comp = 'multinomial',
basic_info = wham_data)
my_input$data$selpars_lower
my_input$map$M_re
my_input$data$age_comp_model_fleets
require(BBmisc)
require(ss3sim)
rm(list = ls())
setwd('C:/Users/moroncog/Documents/Postdoc_UW/test_size-info/SS_sim')
source('parametersSimulation.R')
om = "scenario_base_2/cod-om"
em = "scenario_base_2/cod-em"
scenarioName = 'D2-E0-F0-R0-cod'
# First set of changes: This will apply for OM:
F0 = list(years = list(c(iniModelyear:nyears)), fleets = 1,
fvals = list(c(upFway, downFway[-1])))
# Second set of changes: This will apply for EM:
index0 = list(fleets = c(2), years = list(iniSurYear:nyears), sds_obs = list(CVSur), seas = list(1))
lcomp0 = list(fleets = c(1), Nsamp = list(saNsamEM),
years = list(iniFyear:nyears), seas = list(7),
cpar = c(NA))
calcomp0 = list(fleets = c(2),
years = list(iniSurYear:nyears), seas = list(1), Nsamp_lengths = list(200),
Nsamp_ages = list(200), cpar = c(NA))
# Standard (apply to EM):
E0 = list(natM_type = NULL, natM_n_breakpoints = NULL, natM_lorenzen = NULL,
natM_val= NULL, par_name = c("NatM_p_1_Fem_GP_1"),
par_int = c(base_natM), par_phase = c(3), forecast_num = 0) # This is not altering anything
R0 = list(retro_yr = 0)
ss3sim_base(iterations = 10, scenarios = scenarioName,
f_params = F0, index_params = index0, lcomp_params = lcomp0,
calcomp_params = calcomp0, estim_params = E0,
retro_params = R0, om_dir = om, em_dir = em,
bias_adjust = FALSE)
om = "scenario_base_2/cod-om"
em = "scenario_base_2/cod-em"
scenarioName = 'D2-E0-F0-R0-cod'
# First set of changes: This will apply for OM:
F0 = list(years = list(c(iniModelyear:nyears)), fleets = 1,
fvals = list(c(upFway, downFway[-1])))
# Second set of changes: This will apply for EM:
index0 = list(fleets = c(2), years = list(iniSurYear:nyears), sds_obs = list(CVSur), seas = list(1))
lcomp0 = list(fleets = c(1), Nsamp = list(saNsamEM),
years = list(iniFyear:nyears), seas = list(7),
cpar = c(NA))
calcomp0 = list(fleets = c(2),
years = list(iniSurYear:nyears), seas = list(1), Nsamp_lengths = list(200),
Nsamp_ages = list(200), cpar = c(NA))
# Standard (apply to EM):
E0 = list(natM_type = NULL, natM_n_breakpoints = NULL, natM_lorenzen = NULL,
natM_val= NULL, par_name = c("NatM_p_1_Fem_GP_1"),
par_int = c(base_natM), par_phase = c(3), forecast_num = 0) # This is not altering anything
R0 = list(retro_yr = 0)
ss3sim_base(iterations = 10, scenarios = scenarioName,
f_params = F0, index_params = index0, lcomp_params = lcomp0,
calcomp_params = calcomp0, estim_params = E0,
retro_params = R0, om_dir = om, em_dir = em,
bias_adjust = FALSE)
om = "scenario_base_2/cod-om"
em = "scenario_base_2/cod-em"
scenarioName = 'D2-E0-F0-R0-cod'
# First set of changes: This will apply for OM:
F0 = list(years = list(c(iniModelyear:nyears)), fleets = 1,
fvals = list(c(upFway, downFway[-1])))
# Second set of changes: This will apply for EM:
index0 = list(fleets = c(2), years = list(iniSurYear:nyears), sds_obs = list(CVSur), seas = list(1))
lcomp0 = list(fleets = c(1), Nsamp = list(saNsamEM),
years = list(iniFyear:nyears), seas = list(7),
cpar = c(NA))
calcomp0 = list(fleets = c(2),
years = list(iniSurYear:nyears), seas = list(1), Nsamp_lengths = list(200),
Nsamp_ages = list(200), cpar = c(NA))
# Standard (apply to EM):
E0 = list(natM_type = NULL, natM_n_breakpoints = NULL, natM_lorenzen = NULL,
natM_val= NULL, par_name = c("NatM_p_1_Fem_GP_1"),
par_int = c(base_natM), par_phase = c(3), forecast_num = 0) # This is not altering anything
R0 = list(retro_yr = 0)
ss3sim_base(iterations = 10, scenarios = scenarioName,
f_params = F0, index_params = index0, lcomp_params = lcomp0,
calcomp_params = calcomp0, estim_params = E0,
retro_params = R0, om_dir = om, em_dir = em,
bias_adjust = FALSE)
require(BBmisc)
require(ss3sim)
rm(list = ls())
setwd('C:/Users/moroncog/Documents/Postdoc_UW/test_size-info/SS_sim')
source('parametersSimulation.R')
# Age information ---------------------------------------------------------
om = "scenario_base/cod-om"
em = "scenario_base/cod-em"
scenarioName = 'D0-E0-F0-R0-cod'
# First set of changes: This will apply for OM:
F0 = list(years = list(c(iniModelyear:nyears)), fleets = 1,
fvals = list(c(upFway, downFway[-1])))
# Second set of changes: This will apply for EM:
index0 = list(fleets = c(2), years = list(iniSurYear:nyears), sds_obs = list(CVSur), seas = list(1))
# lcomp0 = list(fleets = c(1), Nsamp = list(saNsamEM), years = list((iniFyear+1):nyears),
#               cpar = c(NA))
agecomp0 = list(fleets = c(1,2), Nsamp = list(saNsamEM, saNsamEM),
years = list((iniFyear):nyears, iniSurYear:nyears), seas = list(7,1),
cpar = c(NA,NA))
# Standard (apply to EM):
E0 = list(natM_type = NULL, natM_n_breakpoints = NULL, natM_lorenzen = NULL,
natM_val= NULL, par_name = c("NatM_p_1_Fem_GP_1"),
par_int = c(base_natM), par_phase = c(3), forecast_num = 0) # This is not altering anything
R0 = list(retro_yr = 0)
ss3sim_base(iterations = 10, scenarios = scenarioName,
f_params = F0, index_params = index0, lcomp_params = NULL,
agecomp_params = agecomp0, estim_params = E0,
retro_params = R0, om_dir = om, em_dir = em,
bias_adjust = FALSE)
SS_report = r4ss::SS_output(dir = 'D0-E0-F0-R0-cod/10/em', covar = FALSE) # from OM
SS_plots(replist = SS_report)
om = "scenario_base/cod-om"
em = "scenario_base/cod-em"
scenarioName = 'D1-E0-F0-R0-cod'
# First set of changes: This will apply for OM:
F0 = list(years = list(c(iniModelyear:nyears)), fleets = 1,
fvals = list(c(upFway, downFway[-1])))
# First set of changes: This will apply for OM:
F0 = list(years = list(c(iniModelyear:nyears)), fleets = 1,
fvals = list(c(upFway, downFway[-1])))
# Second set of changes: This will apply for EM:
index0 = list(fleets = c(2), years = list(iniSurYear:nyears), sds_obs = list(CVSur), seas = list(1))
lcomp0 = list(fleets = c(1), Nsamp = list(saNsamEM), years = list((iniFyear):nyears), seas = list(7),
cpar = c(NA))
agecomp0 = list(fleets = c(2), Nsamp = list(saNsamEM),
years = list(iniSurYear:nyears), seas = list(1),
cpar = c(NA))
# Standard (apply to EM):
E0 = list(natM_type = NULL, natM_n_breakpoints = NULL, natM_lorenzen = NULL,
natM_val= NULL, par_name = c("NatM_p_1_Fem_GP_1"),
par_int = c(base_natM), par_phase = c(3), forecast_num = 0) # This is not altering anything
R0 = list(retro_yr = 0)
ss3sim_base(iterations = 10, scenarios = scenarioName,
f_params = F0, index_params = index0, lcomp_params = lcomp0,
agecomp_params = agecomp0, estim_params = E0,
retro_params = R0, om_dir = om, em_dir = em,
bias_adjust = FALSE)
SS_report = r4ss::SS_output(dir = 'D1-E0-F0-R0-cod/10/em', covar = FALSE) # from OM
om = "scenario_base_2/cod-om"
em = "scenario_base_2/cod-em"
scenarioName = 'D2-E0-F0-R0-cod'
# First set of changes: This will apply for OM:
F0 = list(years = list(c(iniModelyear:nyears)), fleets = 1,
fvals = list(c(upFway, downFway[-1])))
# Second set of changes: This will apply for EM:
index0 = list(fleets = c(2), years = list(iniSurYear:nyears), sds_obs = list(CVSur), seas = list(1))
lcomp0 = list(fleets = c(1), Nsamp = list(saNsamEM),
years = list(iniFyear:nyears), seas = list(7),
cpar = c(NA))
calcomp0 = list(fleets = c(2),
years = list(iniSurYear:nyears), seas = list(1), Nsamp_lengths = list(200),
Nsamp_ages = list(200), cpar = c(NA))
# Standard (apply to EM):
E0 = list(natM_type = NULL, natM_n_breakpoints = NULL, natM_lorenzen = NULL,
natM_val= NULL, par_name = c("NatM_p_1_Fem_GP_1"),
par_int = c(base_natM), par_phase = c(3), forecast_num = 0) # This is not altering anything
R0 = list(retro_yr = 0)
ss3sim_base(iterations = 10, scenarios = scenarioName,
f_params = F0, index_params = index0, lcomp_params = lcomp0,
calcomp_params = calcomp0, estim_params = E0,
retro_params = R0, om_dir = om, em_dir = em,
bias_adjust = FALSE)
SS_report = r4ss::SS_output(dir = 'D2-E0-F0-R0-cod/10/em', covar = FALSE) # from OM
SS_plots(replist = SS_report)
SS_report = r4ss::SS_output(dir = 'D1-E0-F0-R0-cod/10/em', covar = FALSE) # from OM
SS_plots(replist = SS_report)
om = "scenario_base_3/cod-om"
em = "scenario_base_3/cod-em"
scenarioName = 'D3-E0-F0-R0-cod'
# First set of changes: This will apply for OM:
F0 = list(years = list(c(iniModelyear:nyears)), fleets = 1,
fvals = list(c(upFway, downFway[-1])))
# Second set of changes: This will apply for EM:
index0 = list(fleets = c(2), years = list(iniSurYear:nyears), sds_obs = list(CVSur), seas = list(1))
lcomp0 = list(fleets = c(1), Nsamp = list(saNsamEM), years = list((iniFyear):nyears), seas = list(7),
cpar = c(NA))
agecomp0 = list(fleets = c(2), Nsamp = list(saNsamEM),
years = list(iniSurYear:nyears), seas = list(1),
cpar = c(NA))
# Standard (apply to EM):
E0 = list(natM_type = NULL, natM_n_breakpoints = NULL, natM_lorenzen = NULL,
natM_val= NULL, par_name = c("NatM_p_1_Fem_GP_1"),
par_int = c(base_natM), par_phase = c(3), forecast_num = 0) # This is not altering anything
R0 = list(retro_yr = 0)
ss3sim_base(iterations = 10, scenarios = scenarioName,
f_params = F0, index_params = index0, lcomp_params = lcomp0,
agecomp_params = agecomp0, estim_params = E0,
retro_params = R0, om_dir = om, em_dir = em,
bias_adjust = FALSE)
SS_report = r4ss::SS_output(dir = 'D3-E0-F0-R0-cod/10/em', covar = FALSE) # from OM
SS_plots(replist = SS_report)
devtools::install_github("timjmiller/wham", dependencies=TRUE, ref="devel")
